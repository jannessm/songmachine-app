"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Optional = /** @class */ (function () {
    function Optional(value) {
        this.value = value;
    }
    /**
     * Returns an Optional with the specified present non-null value.
     * T - the class of the value
     * @param value the value to be present, which must be non-null
     * @return an Optional with the value present
     * @throws NullOrUndefinedException if value is null or undefined
     */
    Optional.of = function (value) {
        if (!value)
            throw new NullOrUndefinedError();
        else
            return new Optional(value);
    };
    /**
     * Returns an Optional with the specified present non-null value. Or empty Optional if unspecified
     * T - the class of the value
     * @param value the value to be present, which must be non-null
     * @return an Optional with the value present
     */
    Optional.ofNullable = function (value) { return new Optional(value); };
    /**
     * Returns an empty Optional instance. No value is present for this Optional.
     * T - the class of the value
     * @return an empty Optional
     */
    Optional.empty = function () { return Optional.EMPTY; };
    /**
     * If a value is present in this Optional, returns the value, otherwise throws NoSuchElementException.
     * @return the non-null value held by this Optional
     * @throws NoSuchElementException if there is no value present
     */
    Optional.prototype.get = function () {
        if (!this.value)
            throw new NullOrUndefinedError();
        return this.value;
    };
    /**
     * Return the value if present, otherwise return other.
     * @param elseValue the value to be returned if there is no value present, may be null
     */
    Optional.prototype.orElse = function (elseValue) {
        if (this.value)
            return this.value;
        else
            return elseValue;
    };
    /**
     * If a value is present, invoke the specified consumer with the value, otherwise do nothing.
     * @param consumer a predicate to apply to the value, if present
     * @throws NullOrUndefinedError if value is present and consumer not callable
     */
    Optional.prototype.ifPresent = function (consumer) {
        if (!consumer)
            throw new NullOrUndefinedError();
        if (this.value)
            consumer(this.value);
    };
    /**
     * Return true if there is a value present, otherwise false.
     * @return true if there is a value present, otherwise false
     */
    Optional.prototype.isPresent = function () { return !!this.value; };
    /**
     * If a value is present, and the value matches the given predicate, return an Optional describing the value, otherwise return an empty Optional.
     * @param predicate a predicate to apply to the value, if present
     * @return an Optional describing the value of this Optional if a value is present and the value matches the given predicate, otherwise an empty Optional
     * @throws NullOrUndefinedError if predicate is null
     */
    Optional.prototype.filter = function (predicate) {
        if (!predicate)
            throw new NullOrUndefinedError();
        if (!this.value || predicate(this.value))
            return this;
        else
            return Optional.EMPTY;
    };
    /**
     * If a value is present, apply the provided mapping function to it, and if the result is non-null, return an Optional describing the result. Otherwise return an empty Optional.
     * R - the return type of the mapper
     * @param callback a mapping function to apply to the value, if present
     * @return an Optional describing the result of applying a mapping function to the value of this Optional, if a value is present, otherwise an empty Optional
     * @throws NullOrUndefinedError if mapping function is not callable
     *
     */
    Optional.prototype.map = function (callback) {
        if (!callback)
            throw new NullOrUndefinedError();
        if (!!this.value)
            return Optional.EMPTY;
        else
            return Optional.of(callback(this.value));
    };
    Optional.EMPTY = Object.freeze(Optional.ofNullable(null));
    return Optional;
}());
exports.Optional = Optional;
var NullOrUndefinedError = /** @class */ (function (_super) {
    __extends(NullOrUndefinedError, _super);
    function NullOrUndefinedError() {
        return _super.call(this, 'Optional Value is null or undefined') || this;
    }
    return NullOrUndefinedError;
}(Error));
