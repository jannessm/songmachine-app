{
  "version": 3,
  "file": "ngx-autosize.umd.min.js",
  "sources": [
    "ng://ngx-autosize/out/src/autosize.directive.ts",
    "ng://ngx-autosize/out/public_api.ts"
  ],
  "sourcesContent": [
    "import {ElementRef, HostListener, Directive, Input} from '@angular/core';\n\nconst MAX_LOOKUP_RETRIES = 3;\n@Directive({\n    selector: '[autosize]'\n})\n\nexport class Autosize {\n    @Input() minRows: number;\n    @Input() maxRows: number;\n\n    @HostListener('input',['$event.target'])\n    onInput(textArea: HTMLTextAreaElement): void {\n        this.adjust();\n    }\n    private retries: number = 0;\n    private textAreaEl: any;\n    constructor(public element: ElementRef) {\n        if (this.element.nativeElement.tagName !== 'TEXTAREA') {\n            this._findNestedTextArea();\n\n        } else {\n            this.textAreaEl = this.element.nativeElement;\n        }\n    }\n    _findNestedTextArea() {\n        this.textAreaEl = this.element.nativeElement.getElementsByTagName('TEXTAREA')[0];\n        if (!this.textAreaEl) {\n            if (this.retries >= MAX_LOOKUP_RETRIES) {\n                console.warn('angular2-autosize: textarea not found');\n\n            } else {\n                this.retries++;\n                setTimeout(() => {\n                    this._findNestedTextArea();\n                }, 100);\n            }\n        }\n    }\n    ngAfterContentChecked(): void{\n        this.adjust();\n    }\n    adjust(): void {\n        if (this.textAreaEl) {\n            let clone = this.textAreaEl.cloneNode(true);\n            let parent = this.textAreaEl.parentElement;\n            clone.style.visibility = 'hidden';\n            parent.appendChild(clone);\n\n            clone.style.overflow = 'hidden';\n            clone.style.height = 'auto';\n\n            let lineHeight = this._getLineHeight();\n            let height = clone.scrollHeight;\n            let rowsCount = height / lineHeight;\n            if (this.minRows && this.minRows >= rowsCount) {\n                clone.style.overflow = 'auto';\n                height = this.minRows * lineHeight;\n\n            } else if(this.maxRows && this.maxRows <= rowsCount) {\n                clone.style.overflow = 'auto';\n                height = this.maxRows * lineHeight;\n            }\n\n            this.textAreaEl.style.height = height + 'px';\n            parent.removeChild(clone);\n        }\n    }\n\n    private _getLineHeight() {\n        let lineHeight = parseInt(this.textAreaEl.style.lineHeight, 10);\n        if (isNaN(lineHeight)) {\n            let fontSize = window.getComputedStyle(this.textAreaEl, null).getPropertyValue('font-size');\n            lineHeight = Math.floor(parseInt(fontSize.replace('px','')) * 1.5);\n        }\n\n        return lineHeight;\n    }\n}\n",
    "import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {Autosize} from './src/autosize.directive';\nexport * from './src/autosize.directive';\n\n@NgModule({\n    declarations: [\n        Autosize\n    ],\n    exports: [\n        Autosize\n    ]\n})\nexport class AutosizeModule {\n    static forRoot(): ModuleWithProviders {\n        return {ngModule: AutosizeModule, providers: []};\n    }\n}\n"
  ],
  "names": [
    "Autosize",
    "element",
    "this",
    "retries",
    "nativeElement",
    "tagName",
    "_findNestedTextArea",
    "textAreaEl",
    "prototype",
    "onInput",
    "textArea",
    "adjust",
    "_this",
    "getElementsByTagName",
    "console",
    "warn",
    "setTimeout",
    "ngAfterContentChecked",
    "clone",
    "cloneNode",
    "parent",
    "parentElement",
    "style",
    "visibility",
    "appendChild",
    "overflow",
    "height",
    "lineHeight",
    "_getLineHeight",
    "scrollHeight",
    "rowsCount",
    "minRows",
    "maxRows",
    "removeChild",
    "parseInt",
    "isNaN",
    "fontSize",
    "window",
    "getComputedStyle",
    "getPropertyValue",
    "Math",
    "floor",
    "replace",
    "type",
    "Directive",
    "args",
    "selector",
    "ElementRef",
    "Input",
    "HostListener",
    "AutosizeModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "declarations",
    "exports"
  ],
  "mappings": "sQAAA,IAOAA,EAAA,WAUI,SAAJA,EAAuBC,GAAAC,KAAvBD,QAAuBA,EAFvBC,KAAAC,QAA8B,EAGqB,aAAvCD,KAAKD,QAAQG,cAAcC,QAC3BH,KAAKI,sBAGLJ,KAAKK,WAAaL,KAAKD,QAAQG,qBAVvCJ,EAAJQ,UAAAC,QAAI,SAAQC,GACJR,KAAKS,UAYTX,EAAJQ,UAAAF,oBAAI,WAAA,IAAJM,EAAAV,KACQA,KAAKK,WAAaL,KAAKD,QAAQG,cAAcS,qBAAqB,YAAY,GACzEX,KAAKK,aAzBS,GA0BXL,KAAKC,QACLW,QAAQC,KAAK,0CAGbb,KAAKC,UACLa,WAAW,WACPJ,EAAKN,uBACN,QAIfN,EAAJQ,UAAAS,sBAAI,WACIf,KAAKS,UAETX,EAAJQ,UAAAG,OAAI,WACI,GAAIT,KAAKK,WAAY,CACjB,IAAIW,EAAQhB,KAAKK,WAAWY,WAAU,GAClCC,EAASlB,KAAKK,WAAWc,cAC7BH,EAAMI,MAAMC,WAAa,SACzBH,EAAOI,YAAYN,GAEnBA,EAAMI,MAAMG,SAAW,SACvBP,EAAMI,MAAMI,OAAS,OAErB,IAAIC,EAAazB,KAAK0B,iBAClBF,EAASR,EAAMW,aACfC,EAAYJ,EAASC,EACrBzB,KAAK6B,SAAW7B,KAAK6B,SAAWD,GAChCZ,EAAMI,MAAMG,SAAW,OACvBC,EAASxB,KAAK6B,QAAUJ,GAElBzB,KAAK8B,SAAW9B,KAAK8B,SAAWF,IACtCZ,EAAMI,MAAMG,SAAW,OACvBC,EAASxB,KAAK8B,QAAUL,GAG5BzB,KAAKK,WAAWe,MAAMI,OAASA,EAAS,KACxCN,EAAOa,YAAYf,KAInBlB,EAAZQ,UAAAoB,eAAY,WACJ,IAAID,EAAaO,SAAShC,KAAKK,WAAWe,MAAMK,WAAY,IAC5D,GAAIQ,MAAMR,GAAa,CACnB,IAAIS,EAAWC,OAAOC,iBAAiBpC,KAAKK,WAAY,MAAMgC,iBAAiB,aAC/EZ,EAAaa,KAAKC,MAA4C,IAAtCP,SAASE,EAASM,QAAQ,KAAK,MAG3D,OAAOf,KArEf,iBAJA,CAAAgB,KAACC,EAAAA,UAADC,KAAA,CAAW,CACPC,SAAU,oDAJd,CAAAH,KAAQI,EAAAA,gCAQRhB,QAAA,CAAA,CAAAY,KAAKK,EAAAA,QACLhB,QAAA,CAAA,CAAAW,KAAKK,EAAAA,QAELvC,QAAA,CAAA,CAAAkC,KAAKM,EAAAA,aAALJ,KAAA,CAAkB,QAAQ,CAAC,qBCX3B,IAAAK,EAAA,WAAA,SAAAA,YAaWA,EAAXC,QAAI,WACI,MAAO,CAACC,SAAUF,EAAgBG,UAAW,OAdrD,iBAIA,CAAAV,KAACW,EAAAA,SAADT,KAAA,CAAU,CACNU,aAAc,CACVvD,GAEJwD,QAAS,CACLxD"
}
