import { ServerSubscription } from './server-subscription';
export declare type ConnectorFactoryFunction = <I, R>(route: string) => Connector;
export declare class Connector {
    static to(baseUrl?: string): ConnectorFactoryFunction;
    private readonly url;
    private proxy;
    private mode;
    private constructor();
    /**
     * Sends a http request to the route and returns body as generic R
     * @param type Http Method thats used
     * @param payload Request body
     */
    dispatch<I, R>(type: Methods, payload?: I): Promise<R>;
    /**
     * Subscribes to a route and will return an event like object
     */
    subscribe(): ServerSubscription;
    /**
     * Returns a new Connector configured with the given proxy url
     * @param proxyUrl
     */
    useProxy(proxyUrl: string): Connector;
    /**
     * Returns a new Connector configured with the given mode. Default mode is 'no-cors'
     * @param mode
     */
    setMode(mode: Modes): Connector;
}
export declare class Methods {
    static readonly GET: Methods;
    static readonly POST: Methods;
    static readonly PUT: Methods;
    static readonly DELETE: Methods;
    readonly label: string;
    private constructor();
}
export declare class Modes {
    static readonly NO_CORS: Modes;
    static readonly SAME_ORIGIN: Modes;
    static readonly CORS: Modes;
    static readonly NAVIGATE: Modes;
    readonly label: string;
    private constructor();
}
