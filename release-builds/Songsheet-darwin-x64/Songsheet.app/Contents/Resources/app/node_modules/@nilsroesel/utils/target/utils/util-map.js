"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var UtilMap = /** @class */ (function (_super) {
    __extends(UtilMap, _super);
    function UtilMap() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return _super.call(this, args) || this;
    }
    /**
     * @deprecated use asES5() instead
     * @param args
     * @return {UtilMap<K, V>}
     */
    UtilMap.createES5UtilMap = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var map = new Map(args);
        map['__proto__'] = UtilMap.prototype;
        return map;
    };
    UtilMap.asES5 = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return ES5Map.new.apply(ES5Map, args);
    };
    /**
     * Transform all map values by the given function
     * @param supplier function to transform the object. takes the map value as first argument and the key as second
     * @return UtilMap<K, R> with transformed values
     * R - return type of the mapping function and new value type for the returned map
     */
    UtilMap.prototype.map = function (supplier) {
        var mapped = new UtilMap();
        this.forEach((function (value, key) { return mapped.set(key, supplier(value, key)); }));
        return mapped;
    };
    ;
    /**
     * Returns either the key value or if not present, the default value
     * @param key
     * @param defaultValue if key is not in map
     * @return map value if map has key, or the given default value
     */
    UtilMap.prototype.getOrDefault = function (key, defaultValue) { return this.get(key) || defaultValue; };
    /**
     * Get all map values that matching a given criteria
     * @param predicate filter function to filter the object. takes the map value as first argument and the key as second
     * @return UtilMap<K, V> with all matching map entries
     */
    UtilMap.prototype.filter = function (predicate) {
        var filtered = new UtilMap();
        this.forEach(function (value, key) {
            if (predicate(value, key))
                filtered.set(key, value);
        });
        return filtered;
    };
    return UtilMap;
}(Map));
exports.UtilMap = UtilMap;
/**
 * Similar to UtilMap but not exported. Will be returned from the util map for ES5 support
 */
var ES5Map = /** @class */ (function (_super) {
    __extends(ES5Map, _super);
    function ES5Map() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ES5Map.new = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var map = new Map(args);
        map['__proto__'] = ES5Map.prototype;
        return map;
    };
    /**
     * Transform all map values by the given function
     * @param supplier function to transform the object. takes the map value as first argument and the key as second
     * @return UtilMap<K, R> with transformed values
     * R - return type of the mapping function and new value type for the returned map
     */
    ES5Map.prototype.map = function (supplier) {
        var mapped = ES5Map.new();
        this.forEach((function (value, key) { return mapped.set(key, supplier(value, key)); }));
        return mapped;
    };
    ;
    /**
     * Returns either the key value or if not present, the default value
     * @param key
     * @param defaultValue if key is not in map
     * @return map value if map has key, or the given default value
     */
    ES5Map.prototype.getOrDefault = function (key, defaultValue) { return this.get(key) || defaultValue; };
    /**
     * Get all map values that matching a given criteria
     * @param predicate filter function to filter the object. takes the map value as first argument and the key as second
     * @return UtilMap<K, V> with all matching map entries
     */
    ES5Map.prototype.filter = function (predicate) {
        var filtered = ES5Map.new();
        this.forEach(function (value, key) {
            if (predicate(value, key))
                filtered.set(key, value);
        });
        return filtered;
    };
    return ES5Map;
}(UtilMap));
