"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var node_fetch_1 = require("node-fetch");
var EventSource = require("eventsource");
var https_proxy_agent_1 = require("https-proxy-agent");
var server_subscription_1 = require("./server-subscription");
var Connector = /** @class */ (function () {
    function Connector(url, proxy, mode) {
        this.url = url;
        this.proxy = proxy;
        this.mode = mode;
    }
    Connector.to = function (baseUrl) {
        if (baseUrl === void 0) { baseUrl = ''; }
        return function (route) { return new Connector(baseUrl + route); };
    };
    /**
     * Sends a http request to the route and returns body as generic R
     * @param type Http Method thats used
     * @param payload Request body
     */
    Connector.prototype.dispatch = function (type, payload) {
        var _this = this;
        if (payload === void 0) { payload = null; }
        return new Promise(function (resolve) {
            var opts = {
                method: type.label,
                mode: _this.mode,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            };
            if (_this.proxy)
                opts = Object.assign({}, opts, { agent: new https_proxy_agent_1.default(_this.proxy) });
            node_fetch_1.default(_this.url, opts).then(function (response) { return response.json(); })
                .then(function (json) { return resolve(json); })
                .catch(function (e) { return resolve(null); });
        });
    };
    /**
     * Subscribes to a route and will return an event like object
     */
    Connector.prototype.subscribe = function () {
        var opts = this.proxy ? Object.assign({}, { proxy: this.proxy }) : undefined;
        var eventStream = new EventSource(this.url, opts);
        return new server_subscription_1.ServerSubscription(eventStream);
    };
    /**
     * Returns a new Connector configured with the given proxy url
     * @param proxyUrl
     */
    Connector.prototype.useProxy = function (proxyUrl) {
        this.proxy = proxyUrl;
        return new Connector(this.url, this.proxy);
    };
    /**
     * Returns a new Connector configured with the given mode. Default mode is 'no-cors'
     * @param mode
     */
    Connector.prototype.setMode = function (mode) {
        this.mode = mode;
        return new Connector(this.url, this.proxy, this.mode);
    };
    return Connector;
}());
exports.Connector = Connector;
var Methods = /** @class */ (function () {
    function Methods(arg) {
        this.label = arg;
    }
    Methods.GET = new Methods('GET');
    Methods.POST = new Methods('POST');
    Methods.PUT = new Methods('PUT');
    Methods.DELETE = new Methods('DELETE');
    return Methods;
}());
exports.Methods = Methods;
var Modes = /** @class */ (function () {
    function Modes(arg) {
        this.label = arg;
    }
    Modes.NO_CORS = new Modes('no-cors');
    Modes.SAME_ORIGIN = new Modes('same-origin');
    Modes.CORS = new Modes('cors');
    Modes.NAVIGATE = new Modes('navigate');
    return Modes;
}());
exports.Modes = Modes;
